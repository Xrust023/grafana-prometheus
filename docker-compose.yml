version: "3.7"
services:
  go-application:
    build:
      context: ./go-application
    container_name: go-application
    image: go-application
    ports:
      - "84:5000"
  python-application:
    build:
      context: ./python-application
    container_name: python-application
    image: python-application
    ports:
      - "81:5000"
  dotnet-application:
    build:
      context: ./dotnet-application
    container_name: dotnet-application
    image: dotnet-application
    ports:
      - "82:5000"
  nodejs-application:
    build:
      context: ./nodejs-application
    container_name: nodejs-application
    image: nodejs-application
    ports:
      - "83:5000"
  prometheus:
    container_name: prometheus
    image: prom/prometheus
    ports:
      - "9090:9090"
    command: --config.file=/etc/prometheus/prometheus.yaml
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yaml
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_AUTH_BASIC_ENABLED=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
  grafana-dashboards:
    image: alpine:3.10
    depends_on:
      - grafana
    volumes:
      - ./grafana-data:/grafana
    command: >
      /bin/sh -c "
        apk add --no-cache curl
        echo 'waiting for grafana'
        sleep 5s
        cd /grafana
        curl --request POST http://grafana:3000/api/datasources --header 'Content-Type: application/json' -d @datasources.json
        curl --request POST http://grafana:3000/api/dashboards/db --header 'Content-Type: application/json' -d @dashboard.json"
  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude'
      - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
  db:
    image: postgres:14.14
    environment:
      MYSQL_DATABASE: wordpress
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: rootpassword
    ports:
      - "5431:5431"
    volumes:
      - db-data:/var/lib/posrgre
    networks:
      - wp-network

  wordpress:
    image: wordpress:5-fpm-alpine  #ntninja/wordpress-postgresql wordpress:5-fpm-alpine
    container_name: wordpress
    depends_on:
      - db
    volumes:
      - wp_files:/var/www/html
#      - ./pg4wp:/var/www/html/wp-content/pg4wp
#      - ./db.php:/var/www/html/wp-content/db.php
    environment:
      WORDPRESS_DB_HOST: "db"
      WORDPRESS_DB_NAME: "wordpress"
      WORDPRESS_DB_USER: "user"
      WORDPRESS_DB_PASSWORD: "password"
    networks:
      - wp-network
  nginx:
    image: nginx:alpine
    container_name: nginx
    depends_on:
      - wordpress
    ports:
      - 80:80
    volumes:
      - ./conf.d:/etc/nginx/conf.d
      - wp_files:/var/www/html
    networks:
      - wp-network
  postgresql:
    image: postgres:14.13
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: wordpress
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://user:password@postgresql:5432/wordpress?sslmode=disable"
    depends_on:
      - postgresql
    ports:
      - "9187:9187"
volumes:
  wp_files:
  db-data:
  pgdata:
networks:
  wp-network:
    driver: bridge
